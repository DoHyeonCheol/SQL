/*

2-1 (데이터 종류 알아보기)

MySQL에서 사용가능한 데이터 타입은 숫자형 - 정수형, 실수형(소수점) / 문자형 / 날짜형
MySQL에서는 데이터를 저장하기 전에 저장 공간의 데이터 타입을 미리 지정해야 함
미리 정해둔 데이터 타입이 아닐 경우 데이터 저장이 불가능

정수형 (소수점이 없는 숫자 데이터)
TINYINT : 1바이트 : -128~127
SMALLINT : 2바이트 : -32,768~32,767
MEDIUMINT : 3바이트 : 약 -838백만~828백만
INT : 4바이트 : 약 -21억 ~ 21억
BIGINT : 8 바이트 : 약 -900경~900경

실수형 (소수점이 있는 숫자 데이터)
FLOAT : 4바이트 : 소수점 아래 7자리까지 표현
DOUBLE : 8바이트 : 소수점 아래 15자리까지 표현

문자형
CHAR(n) : 최대 255바이트 : n을 1부터 255까지 지정가능, 지정 안 할 시 1 자동 입력
- 고정길이 문자열 저장
VARCHAR(n) : 최대 65535바이트 : n을 1부터 65535까지 지정가능, 지정 안 할 시 사용 불가
- 변동 길이로 문자열 저장
TINYTEXT : 고정 255바이트 : 255바이트 문자열까지 표현 가능
TEXT : 고정65535바이트 : 65535바이트 문자열까지 표현 가능
MEDIUMTEXT : 고정 약 천 6백만 바이트 : 약 천 6백만 바이트 문자열까지 표현 가능
LONGTEXT : 고정 약 42억 바이트 : 약 42억 바이트 문자열까지 표현 가능

날짜형
DATE : 3바이트 : 0000-00-00 ~ 9999-12-31
DATETIME : 3바이트 : 0000-00-00 00:00:00 ~ 9999:12:31 23:59:59
TIME : 4바이트 : -838:59:59 ~ 838:59:59
YEAR : 1바이트 : 1901 ~ 2155

*/

/*

2-2 (기본적인 데이터 다뤄보기)

MySQL에서 데이터 다루는 방법은 엑셀과 매우 유사함

숫자형 데이터 기본 특징
- 데이터 간 연산이 가능해짐

믄자형 데이터 기본 특징
- 반드시 " ", ' ' 와 함께 쓰여야 함
- 이것이 없을 경우 키워드나 함수, 데이터베이스/테이블/컬럼의 이름으로 인식

+) 숫자형, 문자형, 날짜형 데이터는 함수를 사용하여 서로 타입 변환이 가능함

*/

/*

2-3 (테이블 만들고 변경하기)

테이블 : 데이터베이스에서 데이터를 형태를 정해 모아 놓은 저장 공간

컬럼(열) : 데이터를 저장하기 위한 틀
1) 컬럼의 이름과 데이터 타입은 테이블을 만들 때 미리 정해짐
2) 컬럼의 이름은 동일한 테이블 내에서 중복될 수 없음
3) 테이블은 반드시 1개 이상의 컬럼을 가져야 함

값 : 컬럼에 속한 실제 데이터 값
1) 컬럼의 데이터 타입 만을 값으로 가질 수 있음

로우(행) : 관계된 값의 리스트
1) 하나의 로우는 하나의 관계된 데이터를 의미
   ex) 하나의 로우가 한 사람의 데이터
2) 같은 테이블 안에서 로우는 항상 동일한 구조를 가짐
3) 로우를 단위로 데이터 삽입

데이터베이스
1) 여러 사람이 공유하고 사용할 목적으로 통합 관리되는 데이터 저장소 (넓은 의미)
2) 테이블을 저장해두는 저장소 (좁은 의미) - 폴더랑 비슷한 개념

테이블과 데이터베이스의 생성 순서
- 보통의 경우 데이터베이스 생성한 후에 특정 데이터베이스 내에 테이블을 생성

기초 쿼리 문법

1. CREATE DATABASE[데이터베이스 이름]; ( [데이터베이스 이름]라는 이름의 데이터베이스를 생성) / 세미콜론은 필수로 넣어야함

2. SHOW DATABASES;   (현재 존재하는 모든 데이터베이스를 보여달라는 문법)

3. USE[데이터베이스 이름];  (이제부터 [데이터베이스 이름] 데이터베이스를 사용한다는 뜻)

4. CREATE TABLE [테이블이름](
       [컬럼 이름] [데이터 타입],
       [컬럼 이름] [데이터 타입],
       .....
);
( ) 안에 컬럼 리스트를 넣기 / [컬럼 이름]과 [테이터 타입] 사이에 한칸 띄기(여러칸도 가능) / 또한 쉼표(,)로 연결

ex) 4
CREATE TABLE 아이돌(
       이름 VARCHAR(20),
       나이 INT,
       소속 VARCHAR(50)
);

5. ALTER TABLE [테이블 이름] RENAME [새로운 테이블 이름]; (테이블 이름을 새로운 테이블 이름으로 변경한다는 문법)

ex) 5
ALTER TABLE costomer RENAME customers;

6. ALTER TABLE [테이블 이름] ADD COLUMN [컬럼 이름] [데이터 타입];  (새로운 컬럼을 추가하기 위함)

ex) 6
ALTER TABLKE customers ADD COLUMN age INT;

7. ALTER TABLE [테이블 이름] MODIFY COLUMN [컬럼 이름] [새로운 데이터 타입];   (컬럼의 데이터 타입을 변경하는 문법)

ex) 7 
ALTER TABLE customers MODIFY COLUMN age FLOAT

8.
ALTER TABLE [테이블 이름]
CHANGE COLUMN [컬럼 이름] [새로운 컬럼 이름] [새로운 데이터 타입]   (컬럼 이름과 데이터 타입을 한번에 변경하는 방법)

ex) 8
ALTER TABLE customers
CHANGE COLUMN age new_age FLOAT;

9. ALTER TABLE [테이블 이름] DROP COLUMN [컬럼 이름]; (컬럼 삭제하는 방법)

ex) 9
ALTER TABLE customers DROP COLUMN new_age;

데이터베이스, 테이블, 컬럼 이름 정하기 규칙
1. 문자, 숫자, _를 사용함
2. 이름에 쓰이는 문자는 주로 여문 소문자를 사용
   - 한글도 사용은 가능하지만 인코딩 이슈로 주로 영문 사용
   - 보통 키워드나 함수명은 대문자, 사용자가 정의한 이름에는 소문자 사용
3. 예약어는 사용할 수 없음
   - 예악어 : 이미 키워드, 함수명 등의 문법적인 용도로 사용되고 있기 때문에 이름으로 사용할 수 없는 단어
4. 단어와 단어 사이에는 빈칸 대신 _를 사용함
5. 문자로 시작함
   - 숫자, _로 사용하지 않음
6. 데이터베이스 이름은 중복될 수 없음
   - 테이블 이름은 하나의 데이터베이스 내에서는 중복될 수 없음
   - 컬럼 이름은 하나으 ㅣ테이블 내에서는 중복될 수 없음

위를의 규칙을 조심해서 ex) 예시 수정하기
ex)
CREATE TABLE idol(
       name VARCHAR(20),
	   age INT,
       group VARCHAR(50)
);

*/

/*

2-4 (테이블 지우기)

DROP DATABASE [데이터베이스 이름];  ( [데이터베이스 이름]이라는 데이터베이스를 지우는 문법)
DROP TABLE [테이블 이름];         ( [테이블 이름]이라는 테이블을 지우는 문법)
TRUNCATE TABLE [테이블 이름];     ( [테이블 이름]이라는 테이블의 값만 지우는 문법)
DROP DATABASE IF EXISTS [데이터베이스 이름];    ( [데이터베이스 이름]이라는 데이터베이스가 존재한다면 지우는 문법)
DROP TABLE IF EXISTS [테이블 이름];           ( [테이블 이름]이라는 테이블이 존재한다면 지우는 문법)

* 만약 IF EXISTS 가 없이, 존재하지 않는 데이터베이스 / 테이블을 제거하려고 한다면, ERROR가 발생함

DROP / TRUNCATE 차이점
1. DROP : 테이블 자체를 없애는 문법
2. TRUNCATE : 테이블은 유지하지만, 그 안에 있는 값만 제거하는 문법

*/

/*

2-5 (데이터 삽입, 삭제, 수정하기)

데이터 하나 삽입하기

INSERT INTO [테이블 이름] ([컬럼1 이름], [컬럼2 이름], [컬럼3 이름])
VALUES ([컬럼1 값], [컬럼2 값], [컬럼3 값]);     (로우(행)을 나타냄)  / (컬럼 이름과 컬럼 값의 갯수가 서로 동일해야 함)

ex)
INSERT INTO idol (name, age, group)
VALUES ("Jenny", 27, "BlackPink");

데이터 여러개 삽입하기

INSERT INTO [테이블 이름] ([컬럼1 이름], [컬럼2 이름], [컬럼3 이름])
VALUES ([컬럼1 값], [컬럼2 값], [컬럼3 값]),
       ([컬럼1 값], [컬럼2 값], [컬럼3 값]),
       ([컬럼1 값], [컬럼2 값], [컬럼3 값]),
       ....
       ([컬럼1 값], [컬럼2 값], [컬럼3 값]);

데이터 삭제하기

DELETE FROM [테이블 이름]
WHERE [조건 값];

데이터 수정하기

UPDATE [테이블 이름]
SET [컬럼 이름] = [새 값]
WHERE [조건 값];

*/